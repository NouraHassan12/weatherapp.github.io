{"version":3,"sources":["Components/nav.js","Components/Home.js","Components/Weatherform.js","Components/Weathercard.js","Components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["nav","Container","Navbar","expand","variant","Nav","exact","to","Component","Home","className","Weatherform","props","Col","md","onSubmit","getWeather","type","name","placeholder","Weathercard","city","description","temprature","temp_min","temp_max","apikey","Weather","state","humidity","error","e","a","preventDefault","target","elements","value","fetch","api","json","data","console","log","setState","main","temp","weather","this","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5e739312.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Navbar, Nav, Container } from 'react-bootstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport '../Stylesheets/NavCSS.css';\r\nexport default class nav extends Component {\r\n  render() {\r\n    return (\r\n        <Container>\r\n        <Navbar   expand=\"lg\" variant=\"dark\">\r\n         \r\n{/* \r\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" /> */}\r\n          {/* <Navbar.Collapse id=\"responsive-navbar-nav\"> */}\r\n            <Nav >\r\n              <NavLink\r\n                exact\r\n                to=\"/\"\r\n               \r\n              >\r\n           \r\n                HOME\r\n     \r\n              </NavLink>\r\n\r\n              <NavLink\r\n                exact\r\n                to=\"/Weather\"\r\n               \r\n              >\r\n             \r\n                \r\n                Weather\r\n              \r\n              </NavLink>\r\n            \r\n              \r\n            </Nav>\r\n          {/* </Navbar.Collapse> */}\r\n        </Navbar>\r\n   </Container>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport '../Stylesheets/HomeCSS.css';\r\n\r\n\r\nexport default class Home extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n  <div className=\"parent\">\r\n          <div className=\"child1\">\r\n          <h3>Logo</h3>\r\n          <div className=\"copyrights\"> \r\n              <p>cpoy rights saved</p>\r\n          </div>\r\n          </div>\r\n\r\n          <div className=\"child2\">\r\n        <h1>Hello<br/>\r\n            i am <br/>\r\n            Patrick\r\n        </h1>\r\n\r\n        <div className=\"content\">\r\n            <p> Lorem ipsum is a placeholder text\r\n            <br/>\r\n            Lorem ipsum is a placeholder \r\n            <br/>\r\n            Lorem ipsum is a \r\n            \r\n            </p>\r\n           \r\n        </div>\r\n          </div>\r\n\r\n          <div className=\"child3\">\r\n          \r\n          </div>\r\n        </div>\r\n \r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport {  Col, Container } from 'react-bootstrap';\r\nimport '../Stylesheets/FormCSS.css'\r\nconst Weatherform=(props) =>{\r\n \r\n    return (\r\n        <Container>\r\n            <Col md={12} >\r\n            <form   onSubmit={props.getWeather}>\r\n         <input  className=\"form-control\" type=\"text\" name=\"city\" placeholder=\"enter city\"/>\r\n         <button>find</button>\r\n\r\n     </form>\r\n            </Col>\r\n        </Container>\r\n    \r\n    );\r\n  }\r\n\r\n  export default Weatherform;\r\n\r\n","import React from 'react';\r\nimport '../Stylesheets/WeathercardCSS.css'\r\nimport { Container } from 'react-bootstrap';\r\n\r\n\r\nconst Weathercard =(props)=> {\r\n \r\n    return (\r\n        <Container>\r\n      <div className=\"weatherinfo\">\r\n          <p>\r\n          {props.city} \r\n          </p>\r\n         <p> {props.description}</p>\r\n     <p> {props.temprature}</p>\r\n    <p>  {props.temp_min} {props.temp_max}\r\n      </p>\r\n      </div>\r\n      </Container>\r\n    );\r\n\r\n}\r\nexport default Weathercard;","import React, { Component } from 'react';\r\nimport '../Stylesheets/WeatherCSS.css';\r\nimport Weatherform from '../Components/Weatherform';\r\nimport  Weathercard from '../Components/Weathercard';\r\n const apikey= \"ef8c8a8a61f66af003ed6abd8f5a810d\"\r\n\r\nexport default class Weather extends Component {\r\n\r\n    state={\r\n        temprature:'',\r\n        temp_max:'',\r\n        temp_min:'',\r\n        city:'',\r\n        humidity:'',\r\n        description:'',\r\n        error:''\r\n        \r\n\r\n    }\r\n    getWeather = async (e) =>{\r\n       e.preventDefault()\r\n       const city = e.target.elements.city.value;\r\n       const api = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apikey}`);\r\n       const data = await api.json()\r\n        console.log(data);\r\n        if(city){\r\n            this.setState({\r\n                temprature:data.main.temp,\r\n                temp_max:data.main.temp_max,\r\n                temp_min:data.main.temp_min,\r\n                city:data.name,\r\n                humidity:data.main.humidity,\r\n                description:data.weather[0].description,\r\n                error:''\r\n            })\r\n        }\r\n        else{\r\n            this.setState({\r\n        temprature:'',\r\n        temp_max:'',\r\n        temp_min:'',\r\n        city:'',\r\n        humidity:'',\r\n        description:'',\r\n        error:'PLEASE ENTER DATA'\r\n            })\r\n        }\r\n    }\r\n  render() {\r\n    return (\r\n      <div className=\"weather\">\r\n        <div className=\"content\">\r\n            <h3>Just The City Name</h3>\r\n            <p>You Must spelling correctly</p>\r\n      <Weatherform getWeather={this.getWeather}  />\r\n      <Weathercard\r\n      temprature={this.state.temprature}\r\n      temp_max={this.state.temp_max}\r\n      temp_min={this.state.temp_min}\r\n      city={this.state.city}\r\n      humidity={this.state.humidity}\r\n      description={this.state.description}\r\n      error={this.state.error} />\r\n      </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Nav from './Components/nav';\nimport Home from './Components/Home';\nimport Weather from './Components/Weather'\n\nimport './App.css';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Router>\n      <div className=\"\">\n        \n        <Nav />\n       \n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/Weather\" component={Weather} />\n\n      </div>\n    </Router>\n   \n    )\n  }\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// import 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}